; ACTION (move ?piece ?xsrc ?ysrc ?xdest ?ydest)

(role redplayer)
(role blackplayer)

;*******************************************************************************
;* Initial state.                                                              *
;* Letters are columns: row 3 is RED side, row 1 is BLACK                      *
;*******************************************************************************

(init (cell 1 1 b))
(init (cell 1 2 b))
(init (cell 1 3 b))
(init (cell 2 1 b))
(init (cell 2 2 b))
(init (cell 2 3 b))
(init (cell 3 1 b))
(init (cell 3 2 b))
(init (cell 3 3 b))

(init (control redplayer))
(init (score redplayer 0))
(init (score blackplayer 0))
(init (pieces_left redplayer 4))
(init (pieces_left blackplayer 4))
(init (score_limit 1))

; End initial state

;*******************************************************************************
;* NEXT STATE AXIOMS: REGULAR MOVES                                            *
;*******************************************************************************

; MOVE SOURCE
; Piece ?p moves out of ?u ?v leaving square blank
(<= (next (cell ?u ?v b))
    (does ?player (move ?p ?u ?v ?x ?y)))

; MOVE DESTINATION
; Piece red moves to ?x ?y
(<= (next (cell ?x ?y ?p))
    (does ?player (move ?p ?u ?v ?x ?y)))

; REMOVE PIECE
(<= (next (cell ?u ?v b))
    (does ?player (remove ?p ?u ?v)))

; ADD PIECE
(<= (next (cell ?x ?y ?p))
    (does ?player (add ?p ?x ?y)))


; UNDISTURBED CELL
; Piece (or blank) ?p at ?x ?y remains unchanged if:
; 1) ?x ?y is a different cell from the move source cell
; 2) ?x ?y is a different cell from the move destination cell
(<= (next (cell ?x ?y ?p))
    (does ?player (move ?piece ?x1 ?y1 ?x2 ?y2))
    (true (cell ?x ?y ?p))
    (different_cells ?x ?y ?x1 ?y1)
    (different_cells ?x ?y ?x2 ?y2))

; CONTROL TRANSFER. TODO - skip turn if no moves for next player!
(<= (next (control redplayer))
    (true (control blackplayer)))
(<= (next (control blackplayer))
    (true (control redplayer)))

;*******************************************************************************
;* LEGAL MOVES and their auxilliary axioms                                     *
;*******************************************************************************

; Legal Move when you are:
; NOT CAPTURING
(<= (legal ?player (move ?piece ?u ?v ?x ?y))
    (true (control ?player))
    (piece_owner_type ?piece ?player)
    (true (cell ?u ?v ?piece))
    (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (true (cell ?x ?y b)))

; Legal Move when you are:
; CAPTURING
(<= (legal ?player (move ?piece ?u ?v ?x ?y))
    (true (control ?player))
    (piece_owner_type ?piece ?player)
    (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (occupied_by_opponent ?x ?y ?player))

; Legal Move when you are:
; GETTING A POINT - TODO

; Legal Move when you are:
; PLACING A PIECE - TODO

;*******************************************************************************
;* LEGAL PIECE MOVES (PREVIOUSLY KING)  TODO - LOTS OF WORK FROM HERE          *
;*******************************************************************************

(<= (legal2 ?player (move ?piece ?u ?v ?x ?y))
    (piece_owner_type ?piece ?player)
    (true (cell ?u ?v ?piece))
    (can_move ?player ?u ?v ?x ?y))

;;  move is vertical or diagonal
;; Horizontal move
(<= (can_move redplayer ?u ?v ?u ?y)
    (adjacent ?v ?y)
    (occupied_by_opponent ?u ?y)
    (coordinate ?u))
;; Vertical move
(<= (can_move redplayer ?u ?v ?u ?y)
    (adjacent ?v ?y)
    (occupied_by_opponent ?u ?y)
    (coordinate ?u))

(<= (kingmove ?u ?v ?x ?v)
    (adjacent ?u ?x)
    (coordinate ?v))

(<= (kingmove ?u ?v ?x ?y)
    (adjacent ?u ?x)
    (adjacent ?v ?y))

;;;  KING_THREATENS -- Can a king owned by ?attacker capture a piece at (x,y)?
(<= (king_threatens ?attacker ?x ?y)
    (piece_owner_type ?piece ?attacker king)
    (true (cell ?u ?v ?piece))
    (kingmove ?u ?v ?x ?y))

;*******************************************************************************
; AUXILIARY PREDICATES                                                         *
;*******************************************************************************

;;;  DIFFERENT CELLS
;;;  True iff ?x1 ?y1 is a different cell from ?x2 ?y2
(<= (adjacent ?x1 ?x2)
    (next_file ?x1 ?x2))

(<= (adjacent ?x1 ?x2)
    (next_file ?x2 ?x1))

(<= (adjacent ?y1 ?y2)
    (next_rank ?y1 ?y2))

(<= (adjacent ?y1 ?y2)
    (next_rank ?y2 ?y1))

(<= (adjacent_two ?a ?b)
    (adjacent ?a ?mid)
    (adjacent ?mid ?b)
    (distinct ?a ?b))

(<= (clear_column ?u ?v ?y)
    (next_rank ?v ?y)
    (coordinate ?u))

(<= (clear_column ?u ?v ?y)
    (next_rank ?v ?w)
    (true (cell ?u ?w b))
    (clear_column ?u ?w ?y))

(<= (clear_row ?u ?x ?v)
    (next_file ?u ?x)
    (coordinate ?v))

(<= (clear_row ?u ?x ?v)
    (next_file ?u ?w)
    (true (cell ?w ?v b))
    (clear_row ?w ?x ?v))

(<= (different_cells ?x1 ?y1 ?x2 ?y2)
    (distinct ?x1 ?x2)
    (coordinate ?x1)
    (coordinate ?x2)
    (coordinate ?y1)
    (coordinate ?y2))

(<= (different_cells ?x1 ?y1 ?x2 ?y2)
    (distinct ?y1 ?y2)
    (coordinate ?x1)
    (coordinate ?x2)
    (coordinate ?y1)
    (coordinate ?y2))

(<= (has_legal_move ?player)
    (legal ?player (move ?piece ?u ?v ?x ?y)))

(<= (in_check ?player)
    (true (check ?player ?ptype ?x ?y)))

(<= (occupied_by_opponent ?x ?y ?player)
    (true (cell ?x ?y ?piece))
    (opponent ?player ?opponent)
    (piece_owner_type ?piece ?opponent ?type))

(<= (occupied_by_player ?x ?y ?player)
    (true (cell ?x ?y ?piece))
    (piece_owner_type ?piece ?player ?type))

(<= (occupied_by_opponent_or_blank ?x ?y ?player)
	(true (cell ?x ?y b))
	(role ?player))

(<= (occupied_by_opponent_or_blank ?x ?y ?player)
	(occupied_by_opponent ?x ?y ?player))
;*******************************************************************************
;* GAME TERMINATION CONDITIONS                                                 *
;*******************************************************************************
(<= (scorelimit_reached ?player) ; TODO - change to scorelimit reached
    (true (control ?player))
    (true (check ?player ?ptype ?x ?y))
    (stuck ?player))

(<= stalemate ; TODO - change to both players stuck
    (true (control ?player))
    (not (in_check ?player))
    (stuck ?player))

(<= (stuck ?player)
    (role ?player)
    (not (has_legal_move ?player)))

; End auxiliary axioms 

;*******************************************************************************
;* GOALS AND TERMINAL STATES                                                   *
;* Player gets 100 for checkmating the opponent,                               *
;* 50 for stalemating and 0 for being checkmated.                              *
;*******************************************************************************
; TODO - getting stuck for both players
(<= (goal red 100)
    (scorelimit_reached red))

(<= (goal red 0)
    (scorelimit_reached black))

(<= (goal black 100)
    (scorelimit_reached black))

(<= (goal black 0)
    (scorelimit_reached red))

(<= terminal ; TODO - correct?
    (true (control ?player))
    (stuck ?player))

; End goals and terminals
;*******************************************************************************
;* GROUND FACTS                                                                *
;*******************************************************************************

; PLAYER OPPONENTS
(opponent redplayer blackplayer)
(opponent blackplayer redplayer)

; PIECE OWNERSHIP
(piece_owner_type red redplayer)
(piece_owner_type black blackplayer)

; BOARD TOPOLOGY
(next_rank 1 2)
(next_rank 2 3)
(next_rank 3 4)

(next_file a b)
(next_file b c)
(next_file c d)
(next_file d e)
(next_file e f)
(next_file f g)
(next_file g h)

; BOARD COORDINATES

(coordinate 1)
(coordinate 2)
(coordinate 3)
(coordinate 4)
(coordinate 5)
(coordinate 6)
(coordinate 7)
(coordinate 8)
(coordinate a)
(coordinate b)
(coordinate c)
(coordinate d)
(coordinate e)
(coordinate f)
(coordinate g)
(coordinate h)