## PREFERENCES
# Valid values are "player1" (default) and "player2"
autogen_team = player1
symmetry_detection = true
# naive generation makes the FFT with a rule for each state-move pair in deterministic solution and then minimizes
naive_generation = false
## MINIMIZING
minimize = true
use_optimized_minimize = true
# debugging
minimize_preconditions = true
minimize_iteratively = true

## LIFTING
use_lifting = false
# Seems to produce bad results (todo - benchmark)
lift_before_simplify = false
# seems to never produce valid liftings
lift_when_minimizing = true

## OPTIMIZATION (For better or worse)
greedy_autogen = true
# speed up fetching states from rule (doesn't work with symmetry yet)
use_inverted_list_nodes_opt = false
# speed up fetching rule from state
# This particular setting works poorly, and additionally doesn't work with the "simplify_rules_after_deleting_states"
use_inverted_list_rules_opt = false
# rulelist and nodelist is my own invention and works well when there is a lot of rules or states
# This is called binary satisfiability tree in the article
use_nodelist = true
use_rulelist = false
cache_optimal_moves = true

single_thread = false

# NOTE: rule ordering doesn't work with multithreading!
# Valid values are "terminal_first", "terminal_last", "fewest_precons_first", "fewest_precons_last"
use_rule_ordering = false
rule_ordering = terminal_first

## DEBUGGING AND TESTING
# 1) "detailedDebug" results in a lot more debug messages to the console when synthesizing the rules
detailedDebug = false
# testing compares the result of every verification with the slower, but always correct version
testing = false
# use a debug file if the output size exceeds the IDE sysout buffer
use_debug_file = false
debug_filename = debug.txt
# save the FFT to disk after autogenerating
save_fft = false
# benchmark
benchmark_mode = false
no_of_benchmarks = 100
random_seed = false
seed = 1

## VISUAL SETTINGS
show_gui = true
enable_ggp = false
use_ggp_notation = false